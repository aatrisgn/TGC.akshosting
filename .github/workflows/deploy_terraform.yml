name: Deploy Terraform

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  deploy_aks:
    runs-on: ubuntu-latest
    environment: dev

    outputs:
      AKS_CLUSER_NAME: ${{ steps.set_outputs.outputs.AKS_CLUSER_NAME }}
      AKS_RESOURCE_GROUP_NAME: ${{ steps.set_outputs.outputs.AKS_RESOURCE_GROUP_NAME }}

    defaults:
      run:
        working-directory: ./terraform
    
    env:
      ARM_CLIENT_ID: "${{ secrets.AKSHOSTING_DEV_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AKSHOSTING_DEV_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AKSHOSTING_DEV_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ENVIRONMENT_NAME: dev

    steps:
    - uses: actions/checkout@v3

    - name: Install Terraform
      run: bash "${{ github.workspace }}/.github/scripts/install_terraform.sh" 

    - name: Terraform Fmt
      run: terraform fmt -recursive

    - name: Terraform Init
      run: |
        terraform init \
        -backend-config=resource_group_name="${{ secrets.AKSHOSTING_DEV_TFSTATE_RESOURCE_GROUP_NAME }}" \
        -backend-config=storage_account_name="${{ secrets.AKSHOSTING_DEV_TFSTATE_STORAGE_ACCOUNT_NAME }}" \
        -backend-config=container_name="${{ secrets.AKSHOSTING_DEV_TFSTATE_STORAGE_CONTAINER_NAME }}" \
        -backend-config=key="akshosting.${{ env.ENVIRONMENT_NAME }}.tfstate"
        
    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -var-file="envs/dev.tfvars" -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
    
    - name: Terraform Output
      id: tf_output
      run: |
        echo "AKS_CLUSER_NAME=$(terraform output -raw aks_cluster_name)" >> $GITHUB_ENV
        echo "AKS_RESOURCE_GROUP_NAME=$(terraform output -raw aks_resource_group_name)" >> $GITHUB_ENV
    
    - name: Set outputs
      id: set_outputs
      run: |
        echo "AKS_CLUSER_NAME=${{ env.AKS_CLUSER_NAME }}" >> $GITHUB_OUTPUT
        echo "AKS_RESOURCE_GROUP_NAME=${{ env.AKS_RESOURCE_GROUP_NAME }}" >> $GITHUB_OUTPUT
  
  configure_aks:
    runs-on: ubuntu-latest
    environment: dev
    needs: deploy_aks
    
    # env:
    #   ARM_CLIENT_ID: "${{ secrets.AKSHOSTING_DEV_CLIENT_ID }}"
    #   ARM_SUBSCRIPTION_ID: "${{ secrets.AKSHOSTING_DEV_SUBSCRIPTION_ID }}"
    #   ARM_TENANT_ID: "${{ secrets.AKSHOSTING_DEV_TENANT_ID }}"
    #   ARM_USE_AZUREAD: true
    #   ENVIRONMENT_NAME: dev

    steps:
    - uses: actions/checkout@v3

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AKSHOSTING_DEV_CLIENT_ID }}
        tenant-id: ${{ secrets.AKSHOSTING_DEV_TENANT_ID }}
        subscription-id: ${{ secrets.AKSHOSTING_DEV_SUBSCRIPTION_ID }}

    - name: Setup kubectl
      id: install-kubectl
      uses: azure/setup-kubectl@v3

    - name: Set AKS context
      id: set-context
      uses: azure/aks-set-context@v3
      with:
        resource-group: '${{ needs.deploy_aks.outputs.AKS_RESOURCE_GROUP_NAME  }}' 
        cluster-name: '${{ needs.deploy_aks.outputs.AKS_CLUSER_NAME }}'

    - name: Create ArgoCD config
      run: |
        kubectl get namespace argocd || kubectl create namespace argocd

        if ! kubectl get deployment argocd-server -n argocd > /dev/null 2>&1; then
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        else
          echo "Argo CD already installed. Skipping apply."
        fi

        kubectl get services -n argocd
        kubectl port-forward service/argocd-server -n argocd 8080:443