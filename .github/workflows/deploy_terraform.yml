name: Deploy Terraform

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  configure_acr:
    name: Import nginx ingress into ACR
    runs-on: ubuntu-latest
    environment: dev

    env:
      acr_registry: tgclzdevacr.azurecr.io

    steps:
    - uses: actions/checkout@v3
    - run: |
        docker --version    
    - name: 'Az CLI login'
      uses: azure/login@v2
      with:
          client-id: ${{ secrets.AKSHOSTING_DEV_CLIENT_ID }}
          tenant-id: ${{ secrets.AKSHOSTING_DEV_TENANT_ID }}
          subscription-id: ${{ secrets.AKSHOSTING_DEV_SUBSCRIPTION_ID }}
    
    - run: bash "${{ github.workspace }}/.github/scripts/import_nginx_ingress.sh" 
      name: "Build and publish webapp to ACR"

  deploy_aks:
    runs-on: ubuntu-latest
    environment: dev

    outputs:
      AKS_CLUSER_NAME: ${{ steps.set_outputs.outputs.AKS_CLUSER_NAME }}
      AKS_RESOURCE_GROUP_NAME: ${{ steps.set_outputs.outputs.AKS_RESOURCE_GROUP_NAME }}
      #AKS_HOST_NAME: ${{ steps.set_outputs.outputs.AKS_RESOURCE_GROUP_NAME }}

    defaults:
      run:
        working-directory: ./terraform/akssetup
    
    env:
      ARM_CLIENT_ID: "${{ secrets.AKSHOSTING_DEV_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AKSHOSTING_DEV_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AKSHOSTING_DEV_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ENVIRONMENT_NAME: dev

    steps:
    - uses: actions/checkout@v3

    - name: Install Terraform
      run: bash "${{ github.workspace }}/.github/scripts/install_terraform.sh" 

    - name: Terraform Fmt
      run: terraform fmt -recursive

    - name: Terraform Init
      run: |
        terraform init \
        -backend-config=resource_group_name="${{ secrets.AKSHOSTING_DEV_TFSTATE_RESOURCE_GROUP_NAME }}" \
        -backend-config=storage_account_name="${{ secrets.AKSHOSTING_DEV_TFSTATE_STORAGE_ACCOUNT_NAME }}" \
        -backend-config=container_name="${{ secrets.AKSHOSTING_DEV_TFSTATE_STORAGE_CONTAINER_NAME }}" \
        -backend-config=key="akshosting.${{ env.ENVIRONMENT_NAME }}.tfstate"
        
    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -var-file="envs/dev.tfvars" -var=tenant_id=${{ secrets.AKSHOSTING_DEV_TENANT_ID }} -out=tfplan

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
    
    - name: Terraform Output
      id: tf_output
      run: |
        echo "AKS_CLUSER_NAME=$(terraform output -raw aks_cluster_name)" >> $GITHUB_ENV
        echo "AKS_RESOURCE_GROUP_NAME=$(terraform output -raw aks_resource_group_name)" >> $GITHUB_ENV
    
    - name: Set outputs
      id: set_outputs
      run: |
        echo "AKS_CLUSER_NAME=${{ env.AKS_CLUSER_NAME }}" >> $GITHUB_OUTPUT
        echo "AKS_RESOURCE_GROUP_NAME=${{ env.AKS_RESOURCE_GROUP_NAME }}" >> $GITHUB_OUTPUT
  
  configure_aks:
    runs-on: ubuntu-latest
    environment: dev
    needs: deploy_aks

    defaults:
      run:
        working-directory: ./terraform/kubeconfig
    
    env:
      ARM_CLIENT_ID: "${{ secrets.AKSHOSTING_DEV_CLIENT_ID }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.AKSHOSTING_DEV_SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.AKSHOSTING_DEV_TENANT_ID }}"
      ARM_USE_AZUREAD: true
      ENVIRONMENT_NAME: dev

    steps:
    - uses: actions/checkout@v3

    - name: Azure CLI Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AKSHOSTING_DEV_CLIENT_ID }}
        tenant-id: ${{ secrets.AKSHOSTING_DEV_TENANT_ID }}
        subscription-id: ${{ secrets.AKSHOSTING_DEV_SUBSCRIPTION_ID }}

    - name: Setup kubectl
      id: install-kubectl
      uses: azure/setup-kubectl@v3

    - name: Set AKS context
      id: set-context
      uses: azure/aks-set-context@v3
      with:
        resource-group: '${{ needs.deploy_aks.outputs.AKS_RESOURCE_GROUP_NAME  }}' 
        cluster-name: '${{ needs.deploy_aks.outputs.AKS_CLUSER_NAME }}'

    - name: Install AKS extension
      run: |
        az aks install-cli

        az extension add -n k8s-configuration
        az extension add -n k8s-extension

        az extension update -n k8s-configuration
        az extension update -n k8s-extension
    
    - name: Install Terraform
      run: bash "${{ github.workspace }}/.github/scripts/install_terraform.sh" 
  
    - name: Terraform Init
      run: |
        terraform init \
        -backend-config=resource_group_name="${{ secrets.AKSHOSTING_DEV_TFSTATE_RESOURCE_GROUP_NAME }}" \
        -backend-config=storage_account_name="${{ secrets.AKSHOSTING_DEV_TFSTATE_STORAGE_ACCOUNT_NAME }}" \
        -backend-config=container_name="${{ secrets.AKSHOSTING_DEV_TFSTATE_STORAGE_CONTAINER_NAME }}" \
        -backend-config=key="kubeconfig.${{ env.ENVIRONMENT_NAME }}.tfstate"
        
    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -var-file="envs/dev.tfvars" -var=tenant_id=${{ secrets.AKSHOSTING_DEV_TENANT_ID }} -out=tfplan
    
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    # - name: Create ArgoCD config
    #   run: |
    #     kubectl get namespace argocd || kubectl create namespace argocd

    #     if ! kubectl get deployment argocd-server -n argocd > /dev/null 2>&1; then
    #       kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    #     else
    #       echo "Argo CD already installed. Skipping apply."
    #     fi

    #     kubectl -n argocd expose service argocd-server --type LoadBalancer --name argocd-server-lb --port 80,443 --target-port 8080

# argocd admin initial-password -n argocd
#argocd login <ARGOCD_SERVER>
#argocd account update-password
#kubectl patch deployment argocd-server -n argocd \
#   --type='json' \
#   -p='[{"op": "add", "path": "/spec/template/metadata/labels/azure.workload.identity~1use", "value": "true"}]'
